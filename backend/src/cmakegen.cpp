/*
 * Copyright (c) 2023 Christopher Taylor
 *
 * SPDX-License-Identifier: BSL-1.0
 * Distributed under the Boost Software License, Version 1.0. *(See accompanying
 * file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 */
#include "hpx/cmakegen.hpp"
#include <fstream>
#include <cassert>
#include <iostream>
#include <fmt/args.h>

void CMakeGenerator::generate(std::filesystem::path const& p) {
    std::string cppfilename{p.filename()};
    auto pos = cppfilename.find(".chpl");
    assert(pos != std::string::npos);

    const std::string cppprefix =
        cppfilename.substr(0, pos);

    std::ofstream ofs("CMakeLists.txt");
    ofs << "# This program file was generated by the chplx compiler." << std::endl
    << "# The original Chapel program file can be found here: " << p.filename() << std::endl
    << "#" << std::endl
    << "cmake_minimum_required(VERSION 3.19)" << std::endl
    << "project(" << cppprefix << ")" << std::endl
    << "add_executable( " << cppprefix << " " << cppprefix << ".cpp )" << std::endl
    << "if(NOT APPLE)" << std::endl
    << "  set(CMAKE_CXX_STANDARD 20)" << std::endl
    << "endif()" << std::endl
    << "if(NOT WIN32 AND ${CMAKE_CXX_COMPILER_ID} STREQUAL \"Clang\" AND NOT APPLE)" << std::endl
    << "  set(CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} -stdlib=libc++)" << std::endl
    << "endif()" << std::endl
    << "if(NOT CHPLX_DIR)" << std::endl
    << "  message(FATAL_ERROR \"CHPLX_DIR variable undefined\")" << std::endl
    << "endif()" << std::endl
    << "set_property(GLOBAL PROPERTY USE_FOLDERS ON)" << std::endl
    << "find_package(fmt REQUIRED CONFIG)" << std::endl
    << "find_package(HPX REQUIRED CONFIG)" << std::endl
    << "add_library(chplx_library STATIC IMPORTED)" << std::endl
    << "set_target_properties(chplx_library PROPERTIES" << std::endl
    << "  IMPORTED_LOCATION \"${CHPLX_DIR}/build/libchplx_library.a\"" << std::endl
    << "  INTERFACE_INCLUDE_DIRECTORIES \"${CHPLX_DIR}/include\"" << std::endl
    << ")" << std::endl
    << "set(" << cppprefix << "_sources " << cppprefix << ".cpp)" << std::endl
    << "set(" << cppprefix << "_headers " << cppprefix << ".hpp)" << std::endl
    << "if(NOT WIN32 AND ${CMAKE_CXX_COMPILER_ID} STREQUAL \"Clang\" AND APPLE)" << std::endl
    << "  find_library(CORE_LIBPATH NAMES CoreFoundation REQUIRED)" << std::endl
    << "  target_compile_options(" << cppprefix << std::endl
    << "    PUBLIC" << std::endl
    << "    -nostdlib" << std::endl
    << "    -std=c++20" << std::endl
    << "    -O3" << std::endl
    << "    -stdlib=libc++" << std::endl
    << "  )" << std::endl
    << "  target_link_libraries(" << cppprefix <<" PRIVATE ${CORE_LIBPATH})" << std::endl
    << "  target_link_libraries(" << cppprefix << std::endl
    << "    PUBLIC" << std::endl
    << "    c++" << std::endl
    << "  )" << std::endl
    << "endif()" << std::endl
    << "target_link_libraries(" << cppprefix << " PUBLIC fmt::fmt-header-only HPX::hpx chplx_library)" << std::endl;
}
