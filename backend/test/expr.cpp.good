// This program file was generated by the chplx compiler.
// The original Chapel program file can be found here: "expr.chpl"
//
#include <hpx/hpx_init.hpp>

#include "expr.hpp"

int hpx_main(int argc, char ** argv) {

    #line -1 "expr.chpl"
    // function call scope isn't getting cleared from stack
    #line -1 "expr.chpl"
    // when `var b` is accessed during ast traversal in
    #line -1 "expr.chpl"
    // programtreebuilder
    #line -1 "expr.chpl"
    //
    #line 5 "expr.chpl"
    std::int64_t a;
    #line 7 "expr.chpl"
    a = 1 + 1;
    #line 8 "expr.chpl"
    a = a + 1;
    #line 9 "expr.chpl"
    a = 1 + a;
    #line 10 "expr.chpl"
    a = a + a;
    #line 11 "expr.chpl"
    a = ( a + a ) + a;
    #line 12 "expr.chpl"
    a = ( a + a ) + 1;
    #line 13 "expr.chpl"
    a = ( ( 1 + a ) + a ) + a;
    #line 14 "expr.chpl"
    a = ( ( a + 1 ) + a ) + a;
    #line 15 "expr.chpl"
    a = ( ( a + a ) + 1 ) + a;
    #line 16 "expr.chpl"
    a = ( ( a + a ) + a ) + 1;
    #line 18 "expr.chpl"
    a = 1 + ( 1 + 1 );
    #line 19 "expr.chpl"
    a = ( 1 + 1 ) + 1;
    #line 20 "expr.chpl"
    a = a + ( ( a + a ) + a );
    #line 21 "expr.chpl"
    a = ( ( a + a ) + a ) + a;
    #line 22 "expr.chpl"
    a = 1 + ( 1 * 1 );
    #line 23 "expr.chpl"
    a = 1 + a;
    #line 24 "expr.chpl"
    a = a + a;
    #line 25 "expr.chpl"
    a = a + ( a + a );
    #line 26 "expr.chpl"
    a = ( a + a ) + a;
    #line 27 "expr.chpl"
    a = a + ( ( a + a ) + a );
    #line 28 "expr.chpl"
    a = ( ( a + a ) + a ) + a;
    #line 30 "expr.chpl"
    std::int64_t value() {
        #line 31 "expr.chpl"
        return 1;
    }
    #line 34 "expr.chpl"
    a = value();
    #line 36 "expr.chpl"
    a = 1 + value();
    #line 37 "expr.chpl"
    a = value() + 1;
    #line 38 "expr.chpl"
    a = value() + value();
    #line 39 "expr.chpl"
    a = a + ( value() + value() );
    #line 40 "expr.chpl"
    a = ( value() + value() ) + a;
    #line 41 "expr.chpl"
    a = ( ( value() + value() ) + value() ) + a;
    #line 42 "expr.chpl"
    a = a + ( ( value() + value() ) + value() );
    #line 44 "expr.chpl"
    std::int64_t valuea(std::int64_t a) {
        #line 45 "expr.chpl"
        return a;
    }
    #line 48 "expr.chpl"
    a = valuea(a);
    #line 49 "expr.chpl"
    a = valuea(a + 1);
    #line 50 "expr.chpl"
    a = 1 + valuea(a + 1);
    #line 51 "expr.chpl"
    a = valuea(a + 1) + 1;
    #line 53 "expr.chpl"
    a = 1 + valuea(a);
    #line 54 "expr.chpl"
    a = valuea(a) + 1;
    #line 55 "expr.chpl"
    a = valuea(a) + valuea(a);
    #line 56 "expr.chpl"
    a = a + ( valuea(a) + valuea(a) );
    #line 57 "expr.chpl"
    a = ( valuea(a) + valuea(a) ) + a;
    #line 58 "expr.chpl"
    a = ( ( valuea(a) + valuea(a) ) + valuea(a) ) + a;
    #line 59 "expr.chpl"
    a = a + ( ( valuea(a) + valuea(a) ) + valuea(a) );
    #line 61 "expr.chpl"
    std::vector<std::int64_t> b(10);
    #line 62 "expr.chpl"
    b[0 + 0] = 1;

    return hpx::finalize();
}

int main(int argc, char ** argv) {
    return hpx::init(argc, argv);
}