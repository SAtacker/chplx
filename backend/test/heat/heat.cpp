// This program file was generated by the chplx compiler.
// The original Chapel program file can be found here: heat.chpl
//
#include "heat.hpp"

namespace heat {

    struct __thisModule *__this = nullptr;

    
    #line 31 "heat.chpl"
    void __thisModule::update(chplx::Array<double, chplx::Domain<1> > & d,chplx::Array<double, chplx::Domain<1> > & d2) {
        #line 32 "heat.chpl"
        chplx::forall(chplx::Range{1,NX - 1}, [&](auto i) {
            #line 34 "heat.chpl"
            d2(i) = d(i) + ( ( ( dt * k ) / ( dx * dx ) ) * ( ( d(1 + i) + d(1 - i) ) - ( 2 * d(i) ) ) );
        });
        #line 36 "heat.chpl"
        d2(0) = d2(1 - NX);
        #line 37 "heat.chpl"
        d2(NX) = d2(1);
    };

    #line 18 "heat.chpl"
    std::int64_t ghosts = 1;
    #line 19 "heat.chpl"
    double k;
    #line 20 "heat.chpl"
    double dt;
    #line 21 "heat.chpl"
    double dx;
    #line 23 "heat.chpl"
    std::int64_t nx = 1000000;
    #line 24 "heat.chpl"
    std::int64_t nt = 100;
    #line 25 "heat.chpl"
    std::int64_t threads = 1;

    void __thisModule::__main() {

    #line 15 "heat.chpl"
    #include <hpx/include/util.hpp>
    #line 26 "heat.chpl"
    auto NX = nx + 1;
    #line 28 "heat.chpl"
    chplx::Array<double, chplx::Domain<1> > data(chplx::Range(0, NX));
    #line 29 "heat.chpl"
    chplx::Array<double, chplx::Domain<1> > data2(chplx::Range(0, NX));
    #line 42 "heat.chpl"
    chplx::forall(chplx::Range{0,NX}, [&](auto i) {
        #line 43 "heat.chpl"
        data(i) = 1 + ( ( ( i - 1 ) + nx ) % nx );
        #line 44 "heat.chpl"
        data2(i) = 0;
    });
    #line 51 "heat.chpl"
    hpx::chrono::high_resolution_timer t;
    #line 53 "heat.chpl"
    chplx::forLoop(chplx::Range{1,nt}, [&](auto t) {
        #line 54 "heat.chpl"
        update(data, data2);
    });
    #line 66 "heat.chpl"
    const auto elapsed = t.elapsed();
    #line 67 "heat.chpl"
    std::cout << "chapelng,nx,nt," << hpx::resource::get_num_threads() << ",dt,dx," << elapsed << ",0");


    }

} // end namespace